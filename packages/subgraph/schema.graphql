# Types

# Token

type ERC20Token @entity {
  id: ID! # use address as id
  name: String
  symbol: String
  decimals: BigInt
}

type Balance @entity {
  id: ID! # token address + dao address
  token: ERC20Token! # address(0) will be considered as ETH (or canonical token)
  dao: Dao!
  balance: BigInt!
  lastUpdated: BigInt!
}

# Dao

# ACL

type ContractPermissionID @entity {
  id: ID! # where + permissionID
  dao: Dao!
  where: Bytes!
  permissionID: Bytes!
  immutable: Boolean!
}

type Permission @entity {
  "no need to store granted as we can delete permission when revoked"
  id: ID! # where + permissionID + who
  dao: Dao!
  where: Bytes!
  contractPermissionID: ContractPermissionID!
  who: Bytes!
  actor: Bytes!
  oracle: Bytes!
}

# Executions

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: Dao!
  proposal: Proposal!
  execResult: Bytes
}

# Treasury

type VaultWithdraw @entity {
  id: ID!
  dao: Dao!
  token: ERC20Token
  to: Bytes!
  amount: BigInt!
  reference: String!
  transaction: String!
  proposal: Proposal!
  createdAt: BigInt!
}

type VaultDeposit @entity {
  id: ID!
  dao: Dao!
  token: ERC20Token!
  sender: Bytes!
  amount: BigInt!
  reference: String!
  transaction: String!
  createdAt: BigInt!
}

# Dao

type Dao @entity {
  id: ID! # use address as id
  name: String!
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  token: ERC20Token!
  actions: [Action!]! @derivedFrom(field: "dao")
  deposits: [VaultDeposit!]! @derivedFrom(field: "dao")
  withdraws: [VaultWithdraw!]! @derivedFrom(field: "dao")
  balances: [Balance!] @derivedFrom(field: "dao")
  contractPermissionIDs: [ContractPermissionID!]! @derivedFrom(field: "dao")
  permissions: [Permission!]! @derivedFrom(field: "dao")
  packages: [DaoPackage!] @derivedFrom(field: "dao")
  proposals: [Proposal!] @derivedFrom(field: "dao")
}

# Packages

type DaoPackage @entity {
  id: ID! # Dao + Package
  pkg: Package!
  dao: Dao!
}

interface Package {
  id: ID! # address
  daos: [DaoPackage!] @derivedFrom(field: "pkg")
}

# Proposal

interface Proposal {
  id: ID! # package + voteId
  dao: Dao!
  creator: Bytes!
  metadata: String!
  actions: [Action!]! @derivedFrom(field: "proposal")
  executed: Boolean!
  createdAt: BigInt!
}

# Votings

enum VoterState {
  None
  Abstain
  Yea
  Nay
}

# ERC20Voting

type ERC20VotingPackage implements Package @entity {
  id: ID!
  daos: [DaoPackage!] @derivedFrom(field: "pkg")
  trustedForwarder: Bytes!
  proposals: [ERC20VotingProposal!]! @derivedFrom(field: "pkg")
  supportRequiredPct: BigInt
  participationRequiredPct: BigInt
  minDuration: BigInt
  votesLength: BigInt
  token: ERC20Token
}

type ERC20VotingVoter @entity {
  id: ID! # address
  proposals: [ERC20Vote!]! @derivedFrom(field: "voter")
}

type ERC20Vote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: ERC20VotingVoter!
  proposal: ERC20VotingProposal!
  vote: VoterState!
  weight: BigInt!
  createdAt: BigInt!
}

type ERC20VotingProposal implements Proposal @entity {
  id: ID! # package + voteId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  pkg: ERC20VotingPackage!
  voteId: BigInt!
  creator: Bytes!
  metadata: String!
  startDate: BigInt!
  endDate: BigInt!
  snapshotBlock: BigInt!
  supportRequiredPct: BigInt!
  participationRequiredPct: BigInt!
  yea: BigInt
  nay: BigInt
  abstain: BigInt
  votingPower: BigInt!
  voters: [ERC20Vote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
}

# AllowlistVoting

type AllowlistPackage implements Package @entity {
  id: ID!
  daos: [DaoPackage!] @derivedFrom(field: "pkg")
  trustedForwarder: Bytes!
  proposals: [AllowlistProposal!]! @derivedFrom(field: "pkg")
  supportRequiredPct: BigInt
  participationRequiredPct: BigInt
  minDuration: BigInt
  votesLength: BigInt
  users: [AllowlistVoter!]! @derivedFrom(field: "pkg")
}

type AllowlistVoter @entity {
  id: ID! # address
  proposals: [AllowlistVote!]! @derivedFrom(field: "voter")
  pkg: AllowlistPackage!
}

type AllowlistVote @entity {
  "VoterProposal for Many-to-Many"
  id: ID! # voter + proposal
  voter: AllowlistVoter!
  proposal: AllowlistProposal!
  vote: VoterState!
  weight: BigInt!
  createdAt: BigInt!
}

type AllowlistProposal implements Proposal @entity {
  id: ID! # package + voteId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  pkg: AllowlistPackage!
  voteId: BigInt!
  creator: Bytes!
  metadata: String!
  startDate: BigInt!
  endDate: BigInt!
  snapshotBlock: BigInt!
  supportRequiredPct: BigInt!
  participationRequired: BigInt!
  votingPower: BigInt!
  yea: BigInt
  nay: BigInt
  abstain: BigInt
  voters: [AllowlistVote!]! @derivedFrom(field: "proposal")
  open: Boolean!
  executed: Boolean!
  createdAt: BigInt!
}
